%% Cornering Analysis
% Credit - LJ Hamilton

close all
clearvars
clc

%% Adding Paths

% Adding Vehicle Parameters
currentFolder = pwd;
addpath([currentFolder, filesep, '1-Input Functions']);
vehicleObj = TREV2Parameters();

% Adding Tire Models
addpath([currentFolder, filesep, '1-Input Functions', filesep, 'Tire Modeling']);

% Adding Additional Calculators
addpath([currentFolder, filesep, '2-Setup Sims and Calcs', filesep, 'Calculators']);

% Adding Additional Similators
addpath([currentFolder, filesep, '2-Setup Sims and Calcs', filesep, 'Simulators']);

% Adding Reference Files
addpath([currentFolder, filesep, 'Reference Files\']);

%% Tire Modeling

%Input tire filenames
filename.FrontTire = 'A2356run8.mat';
filename.RearTire = 'A2356run8.mat';
[trainingDataFront,tire.IDfront] = createLatTrngData2(filename.FrontTire);
[trainingDataRear,tire.IDrear] = createLatTrngData2(filename.RearTire);

% Front tires
disp([tire.IDfront, ', Front Tire Model is being trained.  Standby...'])
t1 = tic;
[model.FxFront, validationRMSE.FxFront] = Trainer_Fx(trainingDataFront);
[model.FyFront, validationRMSE.FyFront] = Trainer_Fy(trainingDataFront);
[model.MzFront, validationRMSE.MzFront] = Trainer_Mz(trainingDataFront);
[model.muxFront, validation.RMSE_muxFront] = Trainer_mux(trainingDataFront);
[model.muyFront, validation.RMSE_muyFront] = Trainer_muy(trainingDataFront);
toc(t1)

disp('Training completed')

% Rear tires
disp([tire.IDrear, ', Rear Tire Model is being trained.  Standby...'])
t1 = tic;
[model.FxRear, validationRMSE.FxRear] = Trainer_Fx(trainingDataRear);
[model.FyRear, validationRMSE.FyRear] = Trainer_Fy(trainingDataRear);
[model.MzRear, validationRMSE.MzRear] = Trainer_Mz(trainingDataRear);
[model.muxRear, validation.RMSE_muxRear] = Trainer_mux(trainingDataRear);
[model.muyRear, validation.RMSE_muyRear] = Trainer_muy(trainingDataRear);
toc(t1)

disp('Training completed')

filename_P1 = 'A2356run8.mat';
[latTrainingData_P1,tireID,testID] = createLatTrngDataCalc(filename_P1);

filename_P2 = 'A2356run9.mat';
[latTrainingData_P2,tireID,testID] = createLatTrngDataCalc(filename_P2);

totData = cat(1,latTrainingData_P1,latTrainingData_P2);
trainData = latTrainingData_P1;

%% Inputs

% Tire Spring Rates (lbf/in)
[F_polyCalc_Kt,R_polyCalc_Kt] = SpringRateCalc(latTrainingData_P1,latTrainingData_P2,vehicleObj);

K_t = [F_polyCalc_Kt, F_polyCalc_Kt; R_polyCalc_Kt, R_polyCalc_Kt];

[F_polyCalc,R_polyCalc] = LateralCoFCalc(latTrainingData_P1,latTrainingData_P2,vehicleObj);

% Number of Iterations
n = 5;

% Input Test Cornering Parameters
Radius = -348; %in (neg -> Left, pos -> Right)
Velocity = 25; %linspace(0,35,4); %mph

%% Entry Analysis - Immediate G's Generated by SW Input

% Input Steering Wheel Angle, CoG Slip Angle
SWAngle = -8; %linspace(-90,90,5); %deg (L = neg, R = pos)
BetaEntry = 0; %CoG slip angle (deg) (neg -> Right, pos -> Left)

% Stiffnesses (lbf/in)
[K_w,K_r,K_roll] = StiffnessCalc(K_t,vehicleObj);

% Steering Angles (deg), Slip Angles (deg), Load Transfer (lb), Wheel Displacement (in) (neg -> loaded (bump), pos -> unloaded (droop))

SteerAngles = SteerAngleCalc(SWAngle,vehicleObj);
            
[SlipAngles,LatAccelG,Betamax,YawVelo,LongVelo,LateralVelo] = SlipAngleCalc(SteerAngles,BetaEntry,Velocity,Radius,vehicleObj);
             
LatAccelG = 0;

[Fz,LLT,LLT_D,R_g,Roll_Angle,Z] = LLTCalc(K_r,K_roll,Velocity,LatAccelG,vehicleObj);

[IA] = CamberCalc(Roll_Angle,SWAngle,vehicleObj);

[Fx,Fy,Mz,muy] = findTireFM(model,SlipAngles,IA,Fz,vehicleObj.TirePressure);

[YM,AccelEntry] = YMCalc(SteerAngles,Fx,Fy,Mz,vehicleObj);

[Fz,LLT,LLT_D,R_g,Roll_Angle,Z] = LLTCalc(K_r,K_roll,Velocity,AccelEntry(1,2),vehicleObj);

[IA] = CamberCalc(Roll_Angle,SWAngle,vehicleObj);

mu = [sqrt(((Fx(1,1)/Fz(1,1))^2+((Fy(1,1)/Fz(1,1))^2))), sqrt(((Fx(1,2)/Fz(1,2))^2+((Fy(1,2)/Fz(1,2))^2))); sqrt(((Fx(2,1)/Fz(2,1))^2+((Fy(2,1)/Fz(2,1))^2))), sqrt(((Fx(2,2)/Fz(2,2))^2+((Fy(2,2)/Fz(2,2))^2)))];

format shortG

disp('Velocity: ');
disp(Velocity);
disp('Radius: ');
disp(Radius);
if(Radius < 0)
    disp('Left');
else
    disp('Right');
end
disp('Gs: ');
disp(AccelEntry);
disp('Steering Wheel Angle: ');
disp(SWAngle);
disp('Beta: ');
disp(BetaEntry);
disp('Slip Angles: ');
disp(SlipAngles);
disp('LLT_D: ');
disp(LLT_D);
disp('Fx: ');
disp(Fx);
disp('Fy: ');
disp(Fy);
disp('Fz: ');
disp(Fz);
disp('muy: ');
disp(muy);
disp('mu: ');
disp(mu);
%disp('mu_max: ');
%disp(muy);
disp('Roll Angle: ');
disp(Roll_Angle);
disp('Camber: ');
disp(IA);
disp('Wheel Displacement: ');
disp(Z);
disp('Tire Pressure: ');
disp(vehicleObj.TirePressure);

%% Apex Analysis - (beta delta w/ steering sweep)

% Input Steering Wheel Angle, CoG Slip Angle
SWAngleApex = [-10, -30, -60, -55, -25]; %deg (L = neg, R = pos)
BetaApex = [0,Betamax/2,Betamax,Betamax/2,0]; %CoG slip angle (deg) (neg -> Right, pos -> Left)

% Stiffnesses (lbf/in)
[K_w,K_r,K_roll] = StiffnessCalc(K_t,vehicleObj);

% How to Interpret:
% For a successful left hand corner (Radius < 0):
% Corner Entry: Beta = 0 -> +++, YM: +++
% Corner Apex: Betamax -> ---, YM: ~0
% Corner Exit: Beta = 0, YM: ---

SteerAngles = SteerAngleCalc(SWAngleApex(:,1),vehicleObj);

LatAccelG = 0;
          
[SlipAnglesCurrent,LatAccelG,Betamax,YawVelo,LongVelo,LateralVelo] = SlipAngleSim(SteerAngles,BetaApex(:,1),Velocity,Radius,vehicleObj);

LatAccelG = 0;

[Fz,LLT,LLT_D,R_g,Roll_Angle,Z] = LLTCalc(K_roll,Velocity,LatAccelG,vehicleObj);

[IA] = CamberCalc(Roll_Angle,SWAngleApex(:,1),vehicleObj);

[Fx,Fy,Mz,muy] = findTireFM(model,SlipAnglesCurrent,IA,Fz,vehicleObj.TirePressure);

[YM,Accel] = YMCalc(SteerAngles,Fx,Fy,Mz,vehicleObj);

mu = [sqrt(((Fx(1,1)/Fz(1,1))^2+((Fy(1,1)/Fz(1,1))^2))), sqrt(((Fx(1,2)/Fz(1,2))^2+((Fy(1,2)/Fz(1,2))^2))); sqrt(((Fx(2,1)/Fz(2,1))^2+((Fy(2,1)/Fz(2,1))^2))), sqrt(((Fx(2,2)/Fz(2,2))^2+((Fy(2,2)/Fz(2,2))^2)))];

YMSum = 0 + YM;

disp('Velocity: ');
disp(Velocity);
disp('Radius: ');
disp(Radius);
if(Radius < 0)
    disp('Left');
else
    disp('Right');
end

disp('----------------------');

disp('Steering Wheel Angle: ');
disp(SWAngleApex(:,1));
disp('Beta: ');
disp(BetaApex(:,1));
disp('Slip Angles: ');
disp(SlipAnglesCurrent);
% disp('LLT_D: ');
% disp(LLT_D);
disp('Fx: ');
disp(Fx);
disp('Fy: ');
disp(Fy);
disp('Fz: ');
disp(Fz);
disp('mu: ');
disp(mu);
% %disp('mu_max: ');
% %disp(muy);
disp('Gs: ');
disp(Accel);
disp('Yaw Moment: ');
disp(YM);
% disp('Roll Angle: ');
% disp(Roll_Angle);
% disp('Camber: ');
% disp(IA);
% disp('Wheel Displacement: ');
% disp(Z);
% disp('Tire Pressure: ');
% disp(vehicleObj.TirePressure);
disp('----------------------');

for k = 2:length(BetaApex)

    SteerAngles = SteerAngleCalc(SWAngleApex(:,k),vehicleObj);
    
    [SlipAnglesNew,LatAccelG,Betamax,YawVelo,LongVelo,LateralVelo] = SlipAngleCalc(SteerAngles,BetaApex(:,k),Velocity,Radius,vehicleObj);
    
    SlipAngles = SlipAnglesNew - SlipAnglesCurrent;
    
    SlipAnglesCurrent = SlipAngles;
    
    [Fz,LLT,LLT_D,R_g,Roll_Angle,Z] = LLTSim(K_roll,Velocity,Accel(1,2),vehicleObj);
    
    [IA] = CamberSim(Roll_Angle,SWAngleApex(:,k),vehicleObj);
    
    [Fx,Fy,Mz,muy] = findTireFM(model,SlipAngles,IA,Fz,vehicleObj.TirePressure);
    
    [YM,Accel] = YMSim(SteerAngles,Fx,Fy,Mz,vehicleObj);
    
    mu = [sqrt(((Fx(1,1)/Fz(1,1))^2+((Fy(1,1)/Fz(1,1))^2))), sqrt(((Fx(1,2)/Fz(1,2))^2+((Fy(1,2)/Fz(1,2))^2))); sqrt(((Fx(2,1)/Fz(2,1))^2+((Fy(2,1)/Fz(2,1))^2))), sqrt(((Fx(2,2)/Fz(2,2))^2+((Fy(2,2)/Fz(2,2))^2)))];
    
    YMSum = YMSum + YM;
    
%     disp('Velocity: ');
%     disp(Velocity);
%     disp('Radius: ');
%     disp(Radius);
%     if(Radius < 0)
%         disp('Left');
%     else
%         disp('Right');
%     end
    disp('Steering Wheel Angle: ');
    disp(SWAngleApex(:,k));
    disp('Beta: ');
    disp(BetaApex(:,k));
    disp('Slip Angles: ');
    disp(SlipAngles);
%     disp('LLT_D: ');
%     disp(LLT_D);
    disp('Fx: ');
    disp(Fx);
    disp('Fy: ');
    disp(Fy);
    disp('Fz: ');
    disp(Fz);
    disp('mu: ');
    disp(mu);
    %disp('mu_max: ');
    %disp(muy);
    disp('Gs: ');
    disp(Accel);
    disp('Yaw Moment: ');
    disp(YM);
%     disp('Roll Angle: ');
%     disp(Roll_Angle);
%     disp('Camber: ');
%     disp(IA);
%     disp('Wheel Displacement: ');
%     disp(Z);
%     disp('Tire Pressure: ');
%     disp(vehicleObj.TirePressure);
    disp('----------------------');

end
